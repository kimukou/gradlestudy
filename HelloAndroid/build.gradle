task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-1'
}

buildscript {
    repositories {
        mavenRepo(urls: 'http://jvoegele.com/maven2/')
    }
    dependencies {
        classpath 'com.jvoegele.gradle.plugins:android-plugin:0.9.7'
    }
}

repositories {
    flatDir(dirs: file("$rootDir/libs"))
    mavenCentral()
}

// プロジェクトのバージョンを設定
version = "x.y.z"
apply plugin: 'android'

//ソース位置
[compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'}
sourceSets.main.java.srcDirs += ['src']

ant.echo sourceSets.main.java.srcDirs
/*
task hoge{
	def ANDROID_HOME=System.getenv()['ANDROID_HOME']
	ant.echo  "ANDROID_HOME=$ANDROID_HOME"
	//ant.exec(executable: "$ANDROID_HOME/tools/emulator", dir: ANDROID_HOME, output: "$rootDir/svnlist.log" , spawn:'true') {
	ant.exec(executable: "emulator", dir: ".", output: "svnlist.log" , spawn:'true') {
		arg(line: "-avd myAVD")
	}
}
*/


// 署名設定
androidPackage {
    keyStore = System.getProperty('user.home')+"/.android/debug.keystore"
    keyAlias = 'androiddebugkey'
    // パスワードが設定されてなければ、コマンド・プロンプトで入力を求められる
    keyStorePassword = "android"
    keyAliasPassword = "android"
}

// プロジェクトのプロパティをリソースのフィルタリング（プロパティの解決）に使うヨ
processResources {
    expand (project.properties)
}

// デバッグ・ビルド設定
task configureDebug << {
    jar.classifier = "debug"
}

// リリース・ビルド設定
task configureRelease << {
    proguard.enabled = false//true
}


