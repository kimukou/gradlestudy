

import java.util.concurrent.Future;

import org.codehaus.groovy.ast.AnnotationNode
import org.codehaus.groovy.ast.ClassHelper
import org.codehaus.groovy.ast.ClassNode
import org.codehaus.groovy.ast.PropertyNode
import org.codehaus.groovy.ast.MethodNode

class EnvDescriptor {
  String name
  String version
}

class GaelykDescriptor {
  String version
}

class AppDescriptor {
  String id
  String version
  EnvDescriptor env
  GaelykDescriptor gaelyk
}

class GeoDescriptor {
  String country
  String region
  String city
  BigDecimal latitude
  BigDecimal longitude
}

def shortcutFor = { type ->
  bind(clazz: currentType(type)) & enclosingScript(sourceFolderOfCurrentType('src/main/webapp/WEB-INF/groovy'))
}

contribute(enclosingScript(sourceFolderOfCurrentType('src/main/webapp/WEB-INF/groovy'))) {
  provider = 'Gaelyk Groovlet'
  delegatesTo type: 'groovyx.gaelyk.GaelykCategory', asCategory: true
}

(sourceFolderOfCurrentType('src/main/webapp/WEB-INF/groovy') & enclosingScript()).accept {
  provider = 'Gaelyk Groovlet'
  property name: 'datastore',
      type: 'com.google.appengine.api.datastore.DatastoreService'

  property name: 'request', type: 'javax.servlet.http.HttpServletRequest', doc: 'the HttpServletRequest object'
  property name: 'response', type: 'javax.servlet.http.HttpServletResponse', doc: 'the HttpServletResponse object'
  property name: 'context',  type: 'javax.servlet.ServletContext', doc: 'the ServletContext object'
  property name: 'application', type: 'javax.servlet.ServletContext', doc: 'same as context'
  property name: 'session', type: 'javax.servlet.http.HttpSession', doc: 'shorthand for request.getSession(false) (can be null) which returns an HttpSession'
  property name: 'params', type: Map, doc: 'map of all form parameters (can be empty)'
  property name: 'headers', type: Map, doc: 'map of all request header fields'
  property name: 'log', type: 'groovyx.gaelyk.logging.GroovyLogger', doc: 'a Groovy logger is available for logging messages through java.util.logging'

  property name: 'out', type: PrintWriter, doc:'shorthand for response.getWriter() which returns a PrintWriter'
  property name: 'sout', type: 'javax.servlet.ServletOutputStream', doc: 'shorthand for response.getOutputStream() which returns a ServletOutputStream'
  property name: 'html', type: 'groovy.xml.MarkupBuilder', doc: 'shorthand for new MarkupBuilder(response.getWriter()) which returns a MarkupBuilder'

  method name: 'forward',         type: 'void',       params: [path: 'java.lang.String'], doc: "forwards to given url, groovlet or template"
  method name: 'include',         type: 'void',       params: [path: 'java.lang.String'], doc: "includes given template"
  method name: 'redirect',        type: 'void',       params: [path: 'java.lang.String'], doc: "redirects to given url, groovlet or template"

  property name: 'app', type: AppDescriptor, doc: 'map of all form parameters (can be empty)'
  property name: 'geo', type: GeoDescriptor, doc: 'geographic information from the requests IP'
}

((sourceFolderOfCurrentType('src/main/webapp/WEB-INF/groovy') & enclosingScript()) | annotatedBy('groovyx.gaelyk.GaelykBindings')).accept {
  property name: 'logger', type: Map, doc: 'a logger accessor can be used to get access to any logger'
  property name: 'datastore', type: 'com.google.appengine.api.datastore.DatastoreService', doc: 'the Datastore service'
  property name: 'memcache', type: 'com.google.appengine.api.memcache.MemcacheService', doc: 'the Memcache service'
  property name: 'urlFetch', type: 'com.google.appengine.api.urlfetch.URLFetchService', doc: 'the URL Fetch service'
  property name: 'mail', type: 'com.google.appengine.api.mail.MailService', doc: 'the Mail service'

  property name: 'images', type: 'groovyx.gaelyk.ImagesServiceWrapper', doc: 'the Images service (actually a convenient wrapper class combining both the methods of ImagesService and ImagesServiceFactory and implementing the ImagesService interface)'
  property name: 'users', type: 'com.google.appengine.api.users.UserService', doc: 'the User service'
  property name: 'user', type: 'com.google.appengine.api.users.User', doc: 'the currently logged in user (null if no user logged in)'
  property name: 'defaultQueue', type: 'com.google.appengine.api.taskqueue.Queue', doc: 'the default queue'
  property name: 'queues', type: Map, doc: 'a map-like object with which you can access the configured queues'
  property name: 'xmpp', type: 'com.google.appengine.api.xmpp.XMPPService', doc: 'the Jabber/XMPP service.'
  property name: 'blobstore', type: 'com.google.appengine.api.blobstore.BlobstoreService', doc: 'the Blobstore service.'
  property name: 'oauth', type: 'com.google.appengine.api.oauth.OAuthService', doc: 'the OAuth service.'
  property name: 'namespace', type: Class, doc: 'the Namespace manager'
  property name: 'capabilities', type: 'com.google.appengine.api.capabilities.CapabilitiesService', doc: 'the Capabilities service'
  property name: 'channel', type: 'com.google.appengine.api.channel.ChannelService', doc: 'the Channel service'
  property name: 'files', type: 'com.google.appengine.api.files.FileService', doc: 'the File service'
  property name: 'backends', type: 'com.google.appengine.api.backends.BackendService', doc: 'the Backend service'
  property name: 'lifecycle', type: 'com.google.appengine.api.LifecycleManager', doc: 'the Lifecycle manager'
  property name: 'localMode', type: Boolean, doc: 'a boolean variable which is true when the application is running in local development mode, and false when deployed on Google\'s cloud.'
  property name: 'prospectiveSearch', type: 'com.google.appengine.api.prospectivesearch.ProspectiveSearchService', doc: 'the prospective search service'
  property name: 'logService', type: 'com.google.appengine.api.log.LogService', doc: 'the log service'
  property name: 'search', type: 'com.google.appengine.api.search.SearchService', doc: 'the search service'
}

(sourceFolderOfCurrentFile('src/main/webapp/WEB-INF') & name("routes") & enclosingScript()).accept {
  delegatesTo type: 'groovyx.gaelyk.routes.RoutesBaseScript'
  provider = 'Gaelyk'
  method name: 'all',
      useNamedArgs: true,
      type: List,
      params: [route: String, forward: String, redirect: String, redirect301: String, validate: Closure, cache: int, ignore: boolean, namespace: String],
      doc: 'Routes all HTTP methods.'
  method name: 'get',
      useNamedArgs: true,
      type: List,
      params: [route: String, forward: String, redirect: String, redirect301: String, validate: Closure, cache: int, ignore: boolean, namespace: String],
      doc: 'Routes GET HTTP method.'
  method name: 'post',
      useNamedArgs: true,
      type: List,
      params: [route: String, forward: String, redirect: String, redirect301: String, validate: Closure, cache: int, ignore: boolean, namespace: String],
      doc: 'Routes POST HTTP method.'
  method name: 'put',
      useNamedArgs: true,
      type: List,
      params: [route: String, forward: String, redirect: String, redirect301: String, validate: Closure, cache: int, ignore: boolean, namespace: String],
      doc: 'Routes PUT HTTP method.'
  method name: 'delete',
      useNamedArgs: true,
      type: List,
      params: [route: String, forward: String, redirect: String, redirect301: String, validate: Closure, cache: int, ignore: boolean, namespace: String],
      doc: 'Routes DELETE HTTP method.'
  method name: 'email',
      useNamedArgs: true,
      type: List,
      params: [to: String],
      doc: 'Routes incoming email messages.'
  method name: 'jabber',
      useNamedArgs: true,
      type: List,
      params: [type: String, to: String],
      doc: 'Routes incomming jabber messages and statuses.'
}

(sourceFolderOfCurrentFile('src/main/webapp/WEB-INF') & name("plugins") & enclosingScript()).accept {
  delegatesTo type: 'groovyx.gaelyk.plugins.PluginsListBaseScript'
  provider = 'Gaelyk'
}

(sourceFolderOfCurrentFile('src/main/webapp/WEB-INF/plugins') & enclosingScript()).accept {
  delegatesTo type: 'groovyx.gaelyk.plugins.PluginBaseScript'
  provider = 'Gaelyk'
}

shortcutFor('com.google.appengine.api.taskqueue.Queue').accept {
  provider = 'Gaelyk'
  property name: 'name', type: 'java.lang.String', doc: 'Shorcut to get the name of the Queue.'
}



shortcutFor('com.google.appengine.api.memcache.MemcacheService').accept {
  provider = 'Gaelyk'
  property name: 'name', type: 'com.google.appengine.api.memcache.AsyncMemcacheService', doc: '''From the <code>memcache</code> binding variable, you can access the asynchronous Memcache service:
<pre><code>
    memcache.async
</code></pre>'''
}


shortcutFor('java.net.URL').accept {
  provider = 'Gaelyk'
  property name: 'unindexed', type: 'groovyx.gaelyk.UnindexedEntityWrapper'
}

shortcutFor('com.google.appengine.api.datastore.DatastoreService').accept {
  provider = 'Gaelyk'
  property name: 'properties',
      type: 'java.util.List',
      doc: 'Gets all datastore kinds and their properties.'
  property name: 'async',
      type: 'com.google.appengine.api.datastore.AsyncDatastoreService',
      doc: 'The asynchronous datastore service.'

  property name: 'namespaces',
      type: 'java.util.List',
      doc: 'Gets datastore namespaces.'
  property name: 'kinds',
      type: 'java.util.List',
      doc: 'Gets datastore kinds.'
}




(enclosingCallName("transform") & inClosure() & enclosingCallDeclaringType('groovyx.gaelyk.GaelykCategory')).accept{
  provider = 'Gaelyk'
  method name: 'resize',
      type: 'com.google.appengine.api.images.Image',
      params: [width: 'int', height: 'int'],
      doc: 'Resizes the image.'
  method name: 'crop',
      type: 'com.google.appengine.api.images.Image',
      params: [leftX: 'double', topY: 'double', rightY: 'double', bottomY: 'double'],
      doc: 'Croppes the image.'

  method name: 'horizontal',
      type: 'com.google.appengine.api.images.Image',
      params: [flip: boolean],
      doc: 'Applies the horizontal flip.'

  method name: 'vertical',
      type: 'com.google.appengine.api.images.Image',
      params: [flip: boolean],
      doc: 'Applies the vertical flip.'

  method name: 'feeling',
      type: 'com.google.appengine.api.images.Image',
      params: [lucky: boolean],
      doc: 'Applies the "I\'m feeling lucky" transformation.'

  property name: 'lucky',
      type: boolean,
      doc: 'Use after the "feeling" keyword'

  property name: 'flip',
      type: boolean,
      doc: 'Use after the "horizontal" or the "vertical" keyword'
}

shortcutFor('com.google.appengine.api.images.Image').accept {
  provider = 'Gaelyk'
}

shortcutFor('com.google.appengine.api.blobstore.BlobKey').accept {
  provider = 'Gaelyk'
  property name: 'size',
      type: 'long',
      doc: 'The size of the blob.'

  property name: 'contentType',
      type: 'java.lang.String',
      doc: 'The content-type of the blob.'

  property name: 'info',
      type: 'com.google.appengine.api.blobstore.BlobInfo',
      doc: '''Get the <code>BlobInfo</code> associated with a blob key with:
<pre><code>
 blobKey.info
</code></pre>'''

  property name: 'filename',
      type: 'java.lang.String',
      doc: 'The name of the file stored in the blob.'

  property name: 'creation',
      type: 'java.util.Date',
      doc: 'The creation date of the file stored in the blob.'

  property name: 'image',
      type: 'com.google.appengine.api.images.Image',
      doc: '''Fetch an image stored in the blobstore.
<pre><code>
def image = blobKey.image
// equivalent of ImagesServiceFactory.makeImageFromBlob(selfKey)
</code></pre>'''
      
  property name: 'servingUrl',
      type: 'String',
      doc: '''Obtains a URL that can serve the image stored as a blob dynamically.
 
  Note: getServingUrl can be time consuming so this should only be
  done once per blobkey and the result should be stored for future use.
 
  <pre><code>
  image.url = blobKey.getServingUrl(retry: 2, onRetry: { ex, i ->
     // do something... log exception? Thread.sleep(1000*i) ?
     true // must return true in order to continue next retry
 }, onFail: { ex -> // do something
})
</code></pre>'''

}


// scaffolded

shortcutFor('com.google.appengine.api.datastore.Key').accept {
  provider = 'Gaelyk'
}

shortcutFor('com.google.appengine.api.files.AppEngineFile').accept {
  provider = 'Gaelyk'

  property name: 'blobKey',
      type: 'com.google.appengine.api.blobstore.BlobKey',
      doc: '''Retrieves the blob key associated with an App Engine file.
<pre><code>
 def file = files.createNewBlobFile("text/plain")
 def key = file.blobKey
 // equivalent of FileServiceFactory.fileService.getBlobKey(file)
</code></pre>'''

}

shortcutFor('com.google.appengine.api.mail.MailService').accept {
  provider = 'Gaelyk'
}

shortcutFor('com.google.appengine.api.xmpp.XMPPService').accept {
  provider = 'Gaelyk'
}

shortcutFor('com.google.appengine.api.channel.ChannelService').accept {
  provider = 'Gaelyk'
}

shortcutFor('javax.servlet.http.HttpServletResponse').accept {
  provider = 'Gaelyk'
  
  property name: 'headers',
      type: 'java.util.Map',
      doc: '''Adds a fake <code>getHeaders()</code> method to <code>HttpServletResponse</code>.
It allows the similar subscript notation syntax of request,
but for setting or overriding a header on the response
(ie. calling <code>response.setHeader()</code>).
It also allows the leftShift notation for adding a header to the response
(ie. calling <code>response.addHeader()</code>.

<pre><code>
 // sets or overrides the header 'a'
 response.headers['a'] == 'b'
 
 // adds an additional value to an existing header
 // or sets a first value for a non-existant header
 response.headers['a'] << 'b' 
</code></pre>'''

}

shortcutFor('com.google.appengine.api.urlfetch.HTTPResponse').accept {
  provider = 'Gaelyk'
  property name: 'text',
      type: 'java.lang.String',
      doc: 'Gets the text of the response.'

  property name: 'statusCode',
      type: 'int',
      doc: 'The HTTP status code (synonym of <code>getResponseCode()</code>).'

  property name: 'headersMap',
      type: 'java.util.Map',
      doc: 'A convenient Map<String, String> of HTTP Headers from the response.'

}

shortcutFor('com.google.appengine.api.images.CompositeTransform').accept {
  provider = 'Gaelyk'
}

shortcutFor('com.google.appengine.api.xmpp.Message').accept {
  provider = 'Gaelyk'

  property name: 'from',
      type: 'java.lang.String',
      doc: 'Get the sender Jabber ID of the message in the form of a String.'

  property name: 'xml',
      type: 'groovy.util.slurpersupport.GPathResult',
      doc: 'Get the XML content of this message (if it\'s an XML message) in the form of a DOM parsed with XmlSlurper..'

  property name: 'recipients',
      type: 'java.util.List',
      doc: 'Gets the list of recipients of this message in the form of a list of Jabber ID strings.'

}

shortcutFor('com.google.appengine.api.capabilities.CapabilitiesService').accept {
  provider = 'Gaelyk'
}

shortcutFor('java.lang.String').accept {
  provider = 'Gaelyk'
}

shortcutFor('java.lang.Object').accept {
  provider = 'Gaelyk'
}

shortcutFor('java.lang.Integer').accept {
  provider = 'Gaelyk'
}

shortcutFor('byte[]').accept {
  provider = 'Gaelyk'

  property name: 'image',
      type: 'com.google.appengine.api.images.Image',
      doc: '''Transform a byte array into an Image.

<pre><code>
def byteArray = ...
def image = byteArray.image
</code></pre>'''

}

shortcutFor('java.util.List').accept {
  provider = 'Gaelyk'
}

shortcutFor('groovy.lang.IntRange').accept {
  provider = 'Gaelyk'
}

shortcutFor('com.google.appengine.api.capabilities.CapabilityStatus').accept {
  provider = 'Gaelyk'
}


(shortcutFor('java.lang.Class')| shortcutFor('com.google.appengine.api.NamespaceManager')).accept {
  provider = 'Gaelyk'
}

shortcutFor('java.util.Map').accept {
  provider = 'Gaelyk'
}

shortcutFor('com.google.appengine.api.xmpp.SendResponse').accept {
  provider = 'Gaelyk'
  property name: 'successful',
      type: 'boolean',
      doc: 'Checks the status of the sending of the message was successful for all its recipients.'

}

shortcutFor('javax.servlet.http.HttpServletRequest').accept {
  provider = 'Gaelyk'
}

shortcutFor('java.io.File').accept {
  provider = 'Gaelyk'
  property name: 'image',
      type: 'com.google.appengine.api.images.Image',
      doc: 'Create an image from a file.'

}

shortcutFor('com.google.appengine.api.files.FileService').accept {
  provider = 'Gaelyk'
}

shortcutFor('com.google.appengine.api.LifecycleManager').accept {
  provider = 'Gaelyk'
  property name: 'shutdownHook',
      type: 'groovy.lang.Closure',
      doc: '''Shortcut to use closures as shutdown hooks.
<pre><code>
 lifecycle.shutdownHook = { ...shutdown logic... }
</code></pre>'''

}

contribute(annotatedBy('groovyx.gaelyk.datastore.Entity')) {
  provider 'Gaelyk Entity'

  method name: 'delete', type: 'void', doc: "Removes this object from the datastore"
  method name: 'save', type: 'void', doc: "Saves this object from the datastore"

  PropertyNode existingKeyProperty = currentType.properties.find { PropertyNode field ->
    field.annotations.any{ AnnotationNode anno ->
      anno.classNode.name == 'groovyx.gaelyk.datastore.Key'
    }
  }

  ClassNode keyType = existingKeyProperty?.type ?: ClassHelper.long_TYPE

  if(!existingKeyProperty){
    property name: 'id', type: ClassHelper.long_TYPE, doc: "Identificator of the object in the datastore"
  }

  method isStatic: true, name: 'get', type: currentType, params: [key: keyType], doc: "Fetches the object from the datastore by given id"
  method isStatic: true, name: 'exists', type: boolean, params: [key: keyType], doc: "Checks whether the with given id exists in the datastore"
  method isStatic: true, name: 'count', type: int, doc: "Counts all objects of current type in the database"
  method isStatic: true, name: 'count', type: int, params: [query: Closure], doc: "Counts all objects of current type in the database which satify given query"
  method isStatic: true, name: 'findAll', type: 'java.util.List<' + currentType.name + '>', doc: "Find all objects of current type in the database"
  method isStatic: true, name: 'findAll', type: 'java.util.List<' + currentType.name + '>', params: [query: Closure], doc: "Find all objects of current type in the database which satify given query"
  method isStatic: true, name: 'findAll', type: 'java.util.List<' + currentType.name + '>', params: [query: 'groovyx.gaelyk.query.QueryBuilder'], doc: "Find all objects of current type in the database which satify given query"
  method isStatic: true, name: 'find', type: currentType, params: [query: Closure], doc: "Find single object of current type in the database which satifies given query"
  method isStatic: true, name: 'find', type: currentType, params: [query: 'groovyx.gaelyk.query.QueryBuilder'], doc: "Find single object of current type in the database which satifies given query"
  method isStatic: true, name: 'iterate', type: 'java.util.Iterator<' + currentType.name + '>', doc: "Iterates over all objects of current type in the database"
  method isStatic: true, name: 'iterate', type: 'java.util.Iterator<' + currentType.name + '>', params: [query: Closure], doc: "Iterates over all objects of current type in the database which satify given query"
  method isStatic: true, name: 'iterate', type: 'java.util.Iterator<' + currentType.name + '>', params: [query: 'groovyx.gaelyk.query.QueryBuilder'], doc: "Iterates over all objects of current type in the database which satify given query"
}

(
    ((
    (
    enclosingCallName("find") |
    enclosingCallName("findAll") |
    enclosingCallName("count") |
    enclosingCallName("iterate")
    )
    & enclosingCallDeclaringType(
    annotatedBy(
    'groovyx.gaelyk.datastore.Entity'
    )
    )
    )
    |
    (
    (
    enclosingCallName("execute") |
    enclosingCallName("query") |
    enclosingCallName("iterate")
    )
    & enclosingCallDeclaringType(
    'groovyx.gaelyk.GaelykCategory'
    )
    ))
    & inClosure()
    ).accept {
  delegatesTo type: 'groovyx.gaelyk.query.QueryBuilder'

  for(String kwd in [
    'all',
    'keys',
    'single',
    'count',
    'asc',
    'desc']
  ){
    property name: kwd, type: String, doc: "The " + kwd + " keyword"
  }
}
 
contribute(enclosingScript(sourceFolderOfCurrentType('src/main/webapp/WEB-INF/groovy')) & inClosure() & enclosingCallName("add") & enclosingCallDeclaringType('groovyx.gaelyk.GaelykCategory')){
  delegatesTo type: 'groovyx.gaelyk.search.DocumentDefinitions'
}

contribute(enclosingScript(sourceFolderOfCurrentType('src/main/webapp/WEB-INF/groovy')) & inClosure() & enclosingCallDeclaringType('groovyx.gaelyk.search.DocumentDefinitions')){
  delegatesTo type: 'groovyx.gaelyk.search.FieldDefinitions'
  property name: 'xyz123'
}




